<script src= "script.js"></script>
## Creating and Hosting Minecraft Server Resource Packs

This page is intended as a start-to-finish guide for hosting a basic Minecraft [resource pack](!Resource packs in Minecraft allow you to control the visuals, sounds, and other aesthetics for the game in a lot of detail.) and adding it to a map. Each section is self-contained: if a step doesn't apply to you, or you don't need help with it, feel free to skip any of them.

We'll be using [GitHub](https://github.com) to host our pack. If you don't yet have an account, sign up [here](https://github.com/signup).

**If you already have a pack and just need help with hosting it, skip to [Setting up a GitHub Repository](#setting-up-a-github-repository)**.

"""info #7F00B5 #EEEEEE
__**Contents:**__
<ul>
- [Step 1: Understanding the Folder Structure of a Resource Pack](#understanding-the-folder-structure)
- [Step 2: Creating your Resource Pack](#creating-your-resource-pack)
- [Step 3: Structuring Pack Meta Files](#structuring-pack-meta-files)
- [Step 4a: Adding Textures](#adding-textures)
- [Step 4b: Adding Fonts](#adding-fonts)
- [Step 4c: Adding Sounds](#adding-sounds)
- [Step 5: Setting up a GitHub repository](#setting-up-a-github-repository)
- [Step 6: Setting up a Server Resource Pack](#setting-up-a-server-resource-pack)
- [SHA-1 Hash Calculator](#hash-calculator)
</ul>
"""

### Understanding the Folder Structure

A Minecraft Resource Pack is essentially a folder which holds a lot of files with your custom textures and resources in them. The below file tree shows how this folder is organised.

(This is adapted from the Minecraft wiki [page on resource packs](https://minecraft.fandom.com/wiki/Resource_pack#Folder_structure). I have simplified it to omit some paths which are more complex or less relevant for server resource packs.)

```tree
[resource pack name]
├── pack.mcmeta
├── pack.png
└── assets
    └── minecraft
        ├── font
        │   ├── [your-font].json
        │   └── [your-font].ttf
        ├── sounds.json
        ├── sounds
        │   └── [sound].ogg
        └── textures
            ├── [entity-type]
            │   └── [texture].png
            ├── entity
            │   └── [entity-type]
            │       └── [texture].png
            ├── item
            │   └── [texture].png
            └── painting
                └── [texture].png
```

We'll go over each of these in more detail individually later on.

### Creating Your Resource Pack

To create your resource pack, start by creating a new folder with your desired resource pack name. This folder will serve as the root directory for your resource pack. Alternatively, you can <a href="example-pack.zip" download>download my example resource pack</a> and copy from there.

If you're not using my example pack, create the following files and folders inside the root folder:
<ol>
- `pack.mcmeta`: This file contains some important metadata about your resource pack: we'll get to it later.
- `pack.png`: This is the icon for your resource pack that displays in the Resource Pack Selection screen.
- `assets` folder: This folder will contain all the custom textures, sounds, and fonts for your resource pack.
</ol>
Inside the `assets` folder, create a `minecraft` subfolder, and inside it create the subfolders:
<ol>
- `font`: If you want a custom font in your pack, otherwise ignore this.
- `textures`: If you want to edit the visual appearance / texture of any block, entity, item, or anything else in the game.
- `sounds`: If you want to edit or add any sounds in the game. If you include this, make sure to also add a `sounds.json` file.
</ol>

### Structuring Pack Meta Files

The `pack.mcmeta` file is a JSON file that provides information about your resource pack. Inside it, paste the following text:

```json
{
  "pack": {
    "pack_format": 23,
    "description": "Your resource pack description goes here"
  }
}
```
Pack format 23 is valid for Minecraft version 1.20.4. To check the most recent version, you can see the [wiki](https://minecraft.fandom.com/wiki/Pack_format#Resources) page on pack formats.

In the description field, add the description you want to be visible in the Resource Pack Selection screen. Note that this is displayed over two lines, and cut off if it is too long.

The `pack.png` file is an optional PNG image that will be displayed as the icon for your resource pack in the selection screen. This should ideally be a small square image. If you don't include this image, the icon for your resource pack will be greyed out.

### Adding Textures

To add custom textures to your resource pack, navigate to `assets/minecraft/textures`. In here, you can create subfolders for the different texture categories, such as `block`, `entity`, `item`, and `painting`.

Place your custom texture files (which should be PNG images) inside the respective subfolders. For example, if you have a custom texture for spruce planks, place it inside the `block` folder and name it `spruce_planks.png`.

The example pack I provided has some examples:
<ul>
- `/textures/block/black_wool.png`: retextures black wool to be pure black
- `/textures/block/white_wool.png`: retextures white wool to be pure white
- `/textures/entity/zombie/zombie.png`: retextures the Zombie to look ghostlike
- `/textures/item/iron_nugget.png`: retextures the iron nugget to look like a chicken nugget
- `/textures/painting/skull_and_roses.png`: retextures the Skull & Roses painting to look like the Mona Lisa
</ul>

### Adding Fonts

To add custom fonts to your resource pack, create a `font` folder inside the `assets/minecraft` folder. Place your custom font file (in TTF or OTF format) inside the font subfolder. In the example pack, I've added `courier.ttf`.

Then, create a file named (e.g.) `courier.json`. Inside it, specify your font, in the format
```json
{
    "providers": [
        {
            "type": "ttf",
            "file": "minecraft:courier.ttf"
        }
    ]
}
```
Replace `courier.ttf` with your filename.

When you want to display text in this new font, you can use
```minecraft
/tellraw @s {"text": "This is a custom font!", "font": "courier"}
```
to control the display.

### Adding Sounds

To add custom sounds to your resource pack, create a `sounds` folder inside the `assets/minecraft` folder to store all your `.ogg` files. You can organise sounds however you want in here, including in subfolders. In my example pack, the sounds directory is structured as:
```tree
assets/minecraft/sounds
├── dial_tone.ogg
├── metronome.ogg
├── square_wave.ogg
└── random
    └── white_noise.ogg
```
Then, navigate back one folder into the `assets/minecraft` folder. Add a file called `sounds.json`, and add the following text (for example):
```json
{
    "block.lever.click": {
        "sounds": [
            {
                "name": "random\/white_noise",
                "volume": 1.00
            }
        ],
        "replace": true
    },
    "entity.player.splash": {
        "sounds": [
            {
                "name": "dial_tone",
                "volume": 1.00
            },
            {
                "name": "metronome",
                "volume": 1.00
            },
            {
                "name": "square_wave",
                "volume": 1.00
            }
        ],
        "replace": true
    }
}
```
This follows a simple pattern: For each sound, we have:
<ol>
- `"sound.resource.location":` (this is the name of the sound path you use in a `/playsound` command)
- `"sounds":` (followed by a list of sound files)
- `"name": "path\/to\/sound_file"` (using backslashes before each slash)
- `"replace": true` (so the game uses these sound files)
</ol>
Edit this accordingly to match all of your files.

### Setting up a GitHub Repository

Once again, we'll be using [GitHub](https://github.com) to host our pack. If you still don't have an account, sign up [here](https://github.com/signup).

<ol>
- Click [here](https://github.com/new) to create a new GitHub [repository](!A repository is essentially a folder on GitHub, which stores your code or resource pack.).
- Add your repository name in the `Repository name` field: this should be the name of your resource pack. For server resource packs, the name isn't super important: it's probably best practice to just name it after your map's name.
- Click on the blue "uploading an existing file" link.
- Navigate to a Finder (Mac) / File Explorer (Windows) window and open your resource pack folder. You should be able to see `assets`, `pack.mcmeta`, and `pack.png`, Drag and drop it into the main part of the GitHub browser window.
- Wait for everything to finish uploading, then scroll down and click the big green button which says "Commit changes".
</ol>

Your files are now stored online!

### Setting up a Server Resource Pack

Now, it's time to grab the link for them. Take the link
```url
https://github.com/AK1089/Example-Resource-Pack/archive/refs/heads/main.zip
```
then replace `AK1089` with your GitHub username and `Example-Resource-Pack` with your repository name. Paste the link into your browser to download the zip file. Then, drag and drop your zip file onto this webpage to view its SHA-1 Hash.

##### Hash Calculator

</p><p id="file-hash-info">You have not yet uploaded a file. Drag and drop a file anywhere on this page to see its hash.</p><p>

```hash
null
```

(All processing is done clientside: your file is never uploaded to this website, and I cannot see it. The source code is available [here](script.js).)

Copy the hash as well as the download link you used, and give them to an admin. They will run the command
```minecraft
/c setresourcepack mapcode url hash
```
where `mapcode` is your map's code, `url` is the download link, and `hash` is the hash generated.